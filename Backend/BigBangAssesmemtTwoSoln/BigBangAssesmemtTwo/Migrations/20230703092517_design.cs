using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace BigBangAssesmemtTwo.Migrations
{
    public partial class design : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordKey" },
                values: new object[] { new byte[] { 200, 4, 35, 35, 181, 245, 102, 48, 207, 180, 194, 94, 42, 30, 140, 63, 168, 30, 59, 48, 21, 40, 120, 147, 188, 185, 91, 213, 42, 87, 75, 153, 86, 131, 6, 36, 193, 185, 208, 181, 29, 62, 162, 191, 96, 66, 32, 15, 157, 69, 132, 251, 81, 209, 67, 33, 143, 227, 222, 20, 232, 84, 149, 59 }, new byte[] { 186, 250, 230, 20, 161, 219, 143, 74, 205, 117, 112, 33, 26, 9, 209, 103, 147, 241, 53, 26, 102, 193, 5, 251, 173, 55, 36, 47, 139, 178, 140, 196, 212, 187, 49, 26, 174, 152, 153, 23, 4, 154, 173, 241, 20, 197, 123, 44, 179, 203, 241, 186, 144, 204, 102, 151, 97, 32, 64, 23, 213, 140, 104, 209, 250, 142, 50, 246, 115, 155, 191, 27, 160, 175, 138, 18, 218, 137, 31, 54, 250, 92, 225, 72, 143, 51, 4, 127, 124, 181, 15, 81, 107, 179, 36, 219, 128, 147, 16, 112, 208, 151, 56, 161, 33, 74, 197, 134, 171, 157, 201, 80, 129, 12, 92, 171, 157, 101, 170, 129, 77, 152, 47, 151, 78, 226, 7, 138 } });
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordKey" },
                values: new object[] { new byte[] { 18, 114, 55, 107, 252, 59, 202, 66, 43, 35, 236, 18, 135, 163, 230, 15, 142, 115, 51, 116, 193, 197, 188, 88, 156, 74, 5, 38, 157, 169, 187, 88, 67, 29, 213, 58, 95, 240, 50, 114, 75, 246, 85, 225, 224, 72, 80, 106, 28, 203, 91, 179, 10, 225, 75, 138, 124, 219, 12, 48, 242, 240, 248, 226 }, new byte[] { 18, 55, 208, 14, 189, 115, 71, 85, 210, 59, 56, 99, 252, 14, 81, 155, 93, 102, 11, 116, 234, 218, 255, 231, 20, 13, 61, 242, 31, 244, 91, 79, 224, 231, 161, 240, 115, 40, 250, 154, 223, 248, 14, 217, 126, 209, 228, 45, 70, 218, 168, 122, 225, 153, 137, 71, 161, 241, 186, 116, 221, 41, 230, 156, 185, 95, 56, 122, 109, 216, 82, 24, 159, 54, 111, 95, 42, 250, 46, 39, 169, 88, 122, 182, 144, 188, 239, 237, 231, 153, 8, 233, 39, 234, 9, 69, 10, 69, 123, 95, 72, 80, 97, 124, 247, 167, 168, 82, 133, 211, 162, 248, 239, 78, 13, 189, 114, 209, 150, 119, 54, 28, 221, 197, 110, 250, 233, 249 } });
        }
    }
}
